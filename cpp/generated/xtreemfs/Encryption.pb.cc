// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xtreemfs/Encryption.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xtreemfs/Encryption.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xtreemfs {
namespace pbrpc {

namespace {

const ::google::protobuf::Descriptor* SymEncBytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymEncBytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedBytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedBytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLockbox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLockbox_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_xtreemfs_2fEncryption_2eproto() {
  protobuf_AddDesc_xtreemfs_2fEncryption_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xtreemfs/Encryption.proto");
  GOOGLE_CHECK(file != NULL);
  SymEncBytes_descriptor_ = file->message_type(0);
  static const int SymEncBytes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymEncBytes, cipher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymEncBytes, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymEncBytes, ciphertext_),
  };
  SymEncBytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymEncBytes_descriptor_,
      SymEncBytes::default_instance_,
      SymEncBytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymEncBytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymEncBytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymEncBytes));
  SignedBytes_descriptor_ = file->message_type(1);
  static const int SignedBytes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBytes, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBytes, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBytes, hash_algo_),
  };
  SignedBytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedBytes_descriptor_,
      SignedBytes::default_instance_,
      SignedBytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedBytes));
  FileLockbox_descriptor_ = file->message_type(2);
  static const int FileLockbox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLockbox, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLockbox, file_id_salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLockbox, salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLockbox, cipher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLockbox, enc_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLockbox, sign_key_),
  };
  FileLockbox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLockbox_descriptor_,
      FileLockbox::default_instance_,
      FileLockbox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLockbox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLockbox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLockbox));
  FileMetadata_descriptor_ = file->message_type(3);
  static const int FileMetadata_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, file_id_salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, mode_),
  };
  FileMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileMetadata_descriptor_,
      FileMetadata::default_instance_,
      FileMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileMetadata));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xtreemfs_2fEncryption_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymEncBytes_descriptor_, &SymEncBytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedBytes_descriptor_, &SignedBytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLockbox_descriptor_, &FileLockbox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileMetadata_descriptor_, &FileMetadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xtreemfs_2fEncryption_2eproto() {
  delete SymEncBytes::default_instance_;
  delete SymEncBytes_reflection_;
  delete SignedBytes::default_instance_;
  delete SignedBytes_reflection_;
  delete FileLockbox::default_instance_;
  delete FileLockbox_reflection_;
  delete FileMetadata::default_instance_;
  delete FileMetadata_reflection_;
}

void protobuf_AddDesc_xtreemfs_2fEncryption_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031xtreemfs/Encryption.proto\022\016xtreemfs.pb"
    "rpc\"=\n\013SymEncBytes\022\016\n\006cipher\030\001 \002(\t\022\n\n\002iv"
    "\030\002 \002(\014\022\022\n\nciphertext\030\003 \002(\014\"A\n\013SignedByte"
    "s\022\014\n\004data\030\001 \002(\014\022\021\n\tsignature\030\002 \002(\014\022\021\n\tha"
    "sh_algo\030\003 \002(\t\"u\n\013FileLockbox\022\017\n\007file_id\030"
    "\001 \002(\t\022\024\n\014file_id_salt\030\002 \002(\014\022\014\n\004salt\030\003 \002("
    "\014\022\016\n\006cipher\030\004 \002(\t\022\017\n\007enc_key\030\005 \002(\014\022\020\n\010si"
    "gn_key\030\006 \002(\014\"t\n\014FileMetadata\022\017\n\007file_id\030"
    "\001 \002(\t\022\024\n\014file_id_salt\030\002 \002(\014\022\014\n\004salt\030\003 \002("
    "\014\022\017\n\007user_id\030\004 \002(\t\022\020\n\010group_id\030\005 \002(\t\022\014\n\004"
    "mode\030\006 \002(\007B(\n&org.xtreemfs.pbrpc.generat"
    "edinterfaces", 452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xtreemfs/Encryption.proto", &protobuf_RegisterTypes);
  SymEncBytes::default_instance_ = new SymEncBytes();
  SignedBytes::default_instance_ = new SignedBytes();
  FileLockbox::default_instance_ = new FileLockbox();
  FileMetadata::default_instance_ = new FileMetadata();
  SymEncBytes::default_instance_->InitAsDefaultInstance();
  SignedBytes::default_instance_->InitAsDefaultInstance();
  FileLockbox::default_instance_->InitAsDefaultInstance();
  FileMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xtreemfs_2fEncryption_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xtreemfs_2fEncryption_2eproto {
  StaticDescriptorInitializer_xtreemfs_2fEncryption_2eproto() {
    protobuf_AddDesc_xtreemfs_2fEncryption_2eproto();
  }
} static_descriptor_initializer_xtreemfs_2fEncryption_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SymEncBytes::kCipherFieldNumber;
const int SymEncBytes::kIvFieldNumber;
const int SymEncBytes::kCiphertextFieldNumber;
#endif  // !_MSC_VER

SymEncBytes::SymEncBytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymEncBytes::InitAsDefaultInstance() {
}

SymEncBytes::SymEncBytes(const SymEncBytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymEncBytes::SharedCtor() {
  _cached_size_ = 0;
  cipher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymEncBytes::~SymEncBytes() {
  SharedDtor();
}

void SymEncBytes::SharedDtor() {
  if (cipher_ != &::google::protobuf::internal::kEmptyString) {
    delete cipher_;
  }
  if (iv_ != &::google::protobuf::internal::kEmptyString) {
    delete iv_;
  }
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    delete ciphertext_;
  }
  if (this != default_instance_) {
  }
}

void SymEncBytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymEncBytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymEncBytes_descriptor_;
}

const SymEncBytes& SymEncBytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fEncryption_2eproto();
  return *default_instance_;
}

SymEncBytes* SymEncBytes::default_instance_ = NULL;

SymEncBytes* SymEncBytes::New() const {
  return new SymEncBytes;
}

void SymEncBytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cipher()) {
      if (cipher_ != &::google::protobuf::internal::kEmptyString) {
        cipher_->clear();
      }
    }
    if (has_iv()) {
      if (iv_ != &::google::protobuf::internal::kEmptyString) {
        iv_->clear();
      }
    }
    if (has_ciphertext()) {
      if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
        ciphertext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymEncBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cipher = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cipher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cipher().data(), this->cipher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_iv;
        break;
      }

      // required bytes iv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ciphertext;
        break;
      }

      // required bytes ciphertext = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ciphertext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ciphertext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymEncBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cipher = 1;
  if (has_cipher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cipher().data(), this->cipher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cipher(), output);
  }

  // required bytes iv = 2;
  if (has_iv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->iv(), output);
  }

  // required bytes ciphertext = 3;
  if (has_ciphertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ciphertext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymEncBytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cipher = 1;
  if (has_cipher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cipher().data(), this->cipher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cipher(), target);
  }

  // required bytes iv = 2;
  if (has_iv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->iv(), target);
  }

  // required bytes ciphertext = 3;
  if (has_ciphertext()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ciphertext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymEncBytes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cipher = 1;
    if (has_cipher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cipher());
    }

    // required bytes iv = 2;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iv());
    }

    // required bytes ciphertext = 3;
    if (has_ciphertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ciphertext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymEncBytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymEncBytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymEncBytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymEncBytes::MergeFrom(const SymEncBytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cipher()) {
      set_cipher(from.cipher());
    }
    if (from.has_iv()) {
      set_iv(from.iv());
    }
    if (from.has_ciphertext()) {
      set_ciphertext(from.ciphertext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymEncBytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymEncBytes::CopyFrom(const SymEncBytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymEncBytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SymEncBytes::Swap(SymEncBytes* other) {
  if (other != this) {
    std::swap(cipher_, other->cipher_);
    std::swap(iv_, other->iv_);
    std::swap(ciphertext_, other->ciphertext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymEncBytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymEncBytes_descriptor_;
  metadata.reflection = SymEncBytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedBytes::kDataFieldNumber;
const int SignedBytes::kSignatureFieldNumber;
const int SignedBytes::kHashAlgoFieldNumber;
#endif  // !_MSC_VER

SignedBytes::SignedBytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedBytes::InitAsDefaultInstance() {
}

SignedBytes::SignedBytes(const SignedBytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedBytes::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_algo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedBytes::~SignedBytes() {
  SharedDtor();
}

void SignedBytes::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (hash_algo_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_algo_;
  }
  if (this != default_instance_) {
  }
}

void SignedBytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedBytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedBytes_descriptor_;
}

const SignedBytes& SignedBytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fEncryption_2eproto();
  return *default_instance_;
}

SignedBytes* SignedBytes::default_instance_ = NULL;

SignedBytes* SignedBytes::New() const {
  return new SignedBytes;
}

void SignedBytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_hash_algo()) {
      if (hash_algo_ != &::google::protobuf::internal::kEmptyString) {
        hash_algo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hash_algo;
        break;
      }

      // required string hash_algo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash_algo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash_algo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash_algo().data(), this->hash_algo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  // required bytes signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }

  // required string hash_algo = 3;
  if (has_hash_algo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash_algo().data(), this->hash_algo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hash_algo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedBytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // required bytes signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // required string hash_algo = 3;
  if (has_hash_algo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash_algo().data(), this->hash_algo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hash_algo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedBytes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // required string hash_algo = 3;
    if (has_hash_algo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash_algo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedBytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedBytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedBytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedBytes::MergeFrom(const SignedBytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_hash_algo()) {
      set_hash_algo(from.hash_algo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedBytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedBytes::CopyFrom(const SignedBytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedBytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SignedBytes::Swap(SignedBytes* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(signature_, other->signature_);
    std::swap(hash_algo_, other->hash_algo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedBytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedBytes_descriptor_;
  metadata.reflection = SignedBytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileLockbox::kFileIdFieldNumber;
const int FileLockbox::kFileIdSaltFieldNumber;
const int FileLockbox::kSaltFieldNumber;
const int FileLockbox::kCipherFieldNumber;
const int FileLockbox::kEncKeyFieldNumber;
const int FileLockbox::kSignKeyFieldNumber;
#endif  // !_MSC_VER

FileLockbox::FileLockbox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLockbox::InitAsDefaultInstance() {
}

FileLockbox::FileLockbox(const FileLockbox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLockbox::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_id_salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cipher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enc_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLockbox::~FileLockbox() {
  SharedDtor();
}

void FileLockbox::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (file_id_salt_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_salt_;
  }
  if (salt_ != &::google::protobuf::internal::kEmptyString) {
    delete salt_;
  }
  if (cipher_ != &::google::protobuf::internal::kEmptyString) {
    delete cipher_;
  }
  if (enc_key_ != &::google::protobuf::internal::kEmptyString) {
    delete enc_key_;
  }
  if (sign_key_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_key_;
  }
  if (this != default_instance_) {
  }
}

void FileLockbox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLockbox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLockbox_descriptor_;
}

const FileLockbox& FileLockbox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fEncryption_2eproto();
  return *default_instance_;
}

FileLockbox* FileLockbox::default_instance_ = NULL;

FileLockbox* FileLockbox::New() const {
  return new FileLockbox;
}

void FileLockbox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    if (has_file_id_salt()) {
      if (file_id_salt_ != &::google::protobuf::internal::kEmptyString) {
        file_id_salt_->clear();
      }
    }
    if (has_salt()) {
      if (salt_ != &::google::protobuf::internal::kEmptyString) {
        salt_->clear();
      }
    }
    if (has_cipher()) {
      if (cipher_ != &::google::protobuf::internal::kEmptyString) {
        cipher_->clear();
      }
    }
    if (has_enc_key()) {
      if (enc_key_ != &::google::protobuf::internal::kEmptyString) {
        enc_key_->clear();
      }
    }
    if (has_sign_key()) {
      if (sign_key_ != &::google::protobuf::internal::kEmptyString) {
        sign_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLockbox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_id_salt;
        break;
      }

      // required bytes file_id_salt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_id_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_id_salt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salt;
        break;
      }

      // required bytes salt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cipher;
        break;
      }

      // required string cipher = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cipher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cipher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cipher().data(), this->cipher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enc_key;
        break;
      }

      // required bytes enc_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enc_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enc_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sign_key;
        break;
      }

      // required bytes sign_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLockbox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required bytes file_id_salt = 2;
  if (has_file_id_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_id_salt(), output);
  }

  // required bytes salt = 3;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->salt(), output);
  }

  // required string cipher = 4;
  if (has_cipher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cipher().data(), this->cipher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cipher(), output);
  }

  // required bytes enc_key = 5;
  if (has_enc_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->enc_key(), output);
  }

  // required bytes sign_key = 6;
  if (has_sign_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->sign_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLockbox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required bytes file_id_salt = 2;
  if (has_file_id_salt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_id_salt(), target);
  }

  // required bytes salt = 3;
  if (has_salt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->salt(), target);
  }

  // required string cipher = 4;
  if (has_cipher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cipher().data(), this->cipher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cipher(), target);
  }

  // required bytes enc_key = 5;
  if (has_enc_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->enc_key(), target);
  }

  // required bytes sign_key = 6;
  if (has_sign_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLockbox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required bytes file_id_salt = 2;
    if (has_file_id_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_id_salt());
    }

    // required bytes salt = 3;
    if (has_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->salt());
    }

    // required string cipher = 4;
    if (has_cipher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cipher());
    }

    // required bytes enc_key = 5;
    if (has_enc_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enc_key());
    }

    // required bytes sign_key = 6;
    if (has_sign_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLockbox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLockbox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLockbox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLockbox::MergeFrom(const FileLockbox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_file_id_salt()) {
      set_file_id_salt(from.file_id_salt());
    }
    if (from.has_salt()) {
      set_salt(from.salt());
    }
    if (from.has_cipher()) {
      set_cipher(from.cipher());
    }
    if (from.has_enc_key()) {
      set_enc_key(from.enc_key());
    }
    if (from.has_sign_key()) {
      set_sign_key(from.sign_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLockbox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLockbox::CopyFrom(const FileLockbox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLockbox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FileLockbox::Swap(FileLockbox* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(file_id_salt_, other->file_id_salt_);
    std::swap(salt_, other->salt_);
    std::swap(cipher_, other->cipher_);
    std::swap(enc_key_, other->enc_key_);
    std::swap(sign_key_, other->sign_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLockbox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLockbox_descriptor_;
  metadata.reflection = FileLockbox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileMetadata::kFileIdFieldNumber;
const int FileMetadata::kFileIdSaltFieldNumber;
const int FileMetadata::kSaltFieldNumber;
const int FileMetadata::kUserIdFieldNumber;
const int FileMetadata::kGroupIdFieldNumber;
const int FileMetadata::kModeFieldNumber;
#endif  // !_MSC_VER

FileMetadata::FileMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileMetadata::InitAsDefaultInstance() {
}

FileMetadata::FileMetadata(const FileMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileMetadata::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_id_salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileMetadata::~FileMetadata() {
  SharedDtor();
}

void FileMetadata::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (file_id_salt_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_salt_;
  }
  if (salt_ != &::google::protobuf::internal::kEmptyString) {
    delete salt_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (this != default_instance_) {
  }
}

void FileMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileMetadata_descriptor_;
}

const FileMetadata& FileMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fEncryption_2eproto();
  return *default_instance_;
}

FileMetadata* FileMetadata::default_instance_ = NULL;

FileMetadata* FileMetadata::New() const {
  return new FileMetadata;
}

void FileMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    if (has_file_id_salt()) {
      if (file_id_salt_ != &::google::protobuf::internal::kEmptyString) {
        file_id_salt_->clear();
      }
    }
    if (has_salt()) {
      if (salt_ != &::google::protobuf::internal::kEmptyString) {
        salt_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_id_salt;
        break;
      }

      // required bytes file_id_salt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_id_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_id_salt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salt;
        break;
      }

      // required bytes salt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // required string user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_group_id;
        break;
      }

      // required string group_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_mode;
        break;
      }

      // required fixed32 mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required bytes file_id_salt = 2;
  if (has_file_id_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_id_salt(), output);
  }

  // required bytes salt = 3;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->salt(), output);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_id(), output);
  }

  // required string group_id = 5;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->group_id(), output);
  }

  // required fixed32 mode = 6;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required bytes file_id_salt = 2;
  if (has_file_id_salt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_id_salt(), target);
  }

  // required bytes salt = 3;
  if (has_salt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->salt(), target);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // required string group_id = 5;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->group_id(), target);
  }

  // required fixed32 mode = 6;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required bytes file_id_salt = 2;
    if (has_file_id_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_id_salt());
    }

    // required bytes salt = 3;
    if (has_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->salt());
    }

    // required string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string group_id = 5;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // required fixed32 mode = 6;
    if (has_mode()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileMetadata::MergeFrom(const FileMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_file_id_salt()) {
      set_file_id_salt(from.file_id_salt());
    }
    if (from.has_salt()) {
      set_salt(from.salt());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMetadata::CopyFrom(const FileMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FileMetadata::Swap(FileMetadata* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(file_id_salt_, other->file_id_salt_);
    std::swap(salt_, other->salt_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileMetadata_descriptor_;
  metadata.reflection = FileMetadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbrpc
}  // namespace xtreemfs

// @@protoc_insertion_point(global_scope)
