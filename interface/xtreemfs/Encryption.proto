/*
 * Copyright (c) 2014 by Philippe Lieser, Zuse Institute Berlin
 *
 * Licensed under the BSD License, see LICENSE file for details.
 */

option java_package = "org.xtreemfs.pbrpc.generatedinterfaces";
package xtreemfs.pbrpc;

message SymEncBytes {
    required string cipher = 1;
    required bytes iv = 2;
    required bytes ciphertext = 3;
}

message SignedBytes {
    // Signed data.
    required bytes data = 1;
    // Signature.
    required bytes signature = 2;
    // The used hash algorithm.
    required string hash_algo = 3;
}

// File lockbox containing the file specific keys.
message FileLockbox {
    // FileID to which this FileLockbox belongs.
    required string file_id = 1;
    // Salt for the FileID to prevent duplicate FileIDs.
    // Required because server generates FileID, must be generated by client.
    required bytes file_id_salt = 2;
    // Salt for signature, to prevent server from partial rollback of signed
    // metadata.
    required bytes salt =3;

    // The cipher used for encrypting the file.
    // Because we use EtS required to ensure integrity of plaintext.
    required string cipher = 4;
    // Symmetric file encryption key.
    required bytes enc_key = 5;
    // PKCS#8 DER encoded asymmetric file sign key.
    // Can be either the public or private one, depending on write access.
    required bytes sign_key = 6;
}

message FileMetadata {
    // FileID to which this FileMetadata belongs.
    required string file_id = 1;
    // Salt for the FileID to prevent duplicate FileIDs.
    // Required because server generates FileID, must be generated by client.
    required bytes file_id_salt = 2;
    // Salt for signature, to prevent server from partial rollback of signed
    // metadata.
    required bytes salt =3;

    // owning user ID
    required string user_id = 4;
    // owning group ID
    required string group_id = 5;
    // POSIX access mode
    required fixed32 mode = 6;
}
